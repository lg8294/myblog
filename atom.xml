<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李刚的博客</title>
  <icon>https://www.gravatar.com/avatar/3475cf0458e23dd4dbc074762806f2dc</icon>
  <subtitle>Talk is cheap. Show me the code.</subtitle>
  <link rel="self" type="application/atom+xml" href="http://lg8294.cn/myblog/atom.xml"/>
  
  <link rel="alternate" type="text/html" href="http://lg8294.cn/myblog/"/>
  <updated>2019-12-15T07:19:14.249Z</updated>
  <id>http://lg8294.cn/myblog/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正确使用NS_DESIGNATED_INITIALIZER</title>
    <link rel="alternate" type="text/html" href="http://lg8294.cn/myblog/2019/11/02/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8NS-DESIGNATED-INITIALIZER/"/>
    <id>http://lg8294.cn/myblog/2019/11/02/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8NS-DESIGNATED-INITIALIZER/</id>
    
    <author>
      <name>李刚</name>
      
      <email>lg8294@qq.com</email>
      
      
      <uri>http://lg8294.cn/myblog</uri>
      
    </author>
    
    <published>2019-11-02T15:29:46.000Z</published>
    <updated>2019-12-15T07:19:14.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正确使用NS-DESIGNATED-INITIALIZER"><a href="#正确使用NS-DESIGNATED-INITIALIZER" class="headerlink" title="正确使用NS_DESIGNATED_INITIALIZER"></a>正确使用NS_DESIGNATED_INITIALIZER</h1><h3 id="为什么要用NS-DESIGNATED-INITIALIZER"><a href="#为什么要用NS-DESIGNATED-INITIALIZER" class="headerlink" title="为什么要用NS_DESIGNATED_INITIALIZER"></a>为什么要用<code>NS_DESIGNATED_INITIALIZER</code></h3><p>Objective-C 中主要通过<code>NS_DESIGNATED_INITIALIZER</code>宏来实现指定构造器的。这里之所以要用这个宏，往往是想告诉调用者要用这个方法去初始化（构造）类对象。</p><p>如果子类指定了新的初始化器，那么在这个初始化器内部必须调用父类的Designated Initializer。并且需要重写父类的Designated Initializer，将其指向子类新的初始化器，否则会出现警告<code>Method override for the designated initializer of the superclass *** not found</code>，具体取决于你的继承的父类类型：</p><ul><li><p>UIViewController</p><p>Method override for the designated initializer of the superclass ‘- initWithNibName:bundle:’ not found<br>Method override for the designated initializer of the superclass ‘-initWithCoder:’ not found</p></li><li><p>UIView</p><p>Method override for the designated initializer of the superclass ‘-initWithFrame:’ not found<br>Method override for the designated initializer of the superclass ‘-initWithCoder:’ not found</p></li><li><p>NSObject</p><p>Method override for the designated initializer of the superclass ‘-init’ not found</p></li></ul><p>正确写法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// .h</span><br><span class="line">- (instancetype)initWithName:(NSString *)name NS_DESIGNATED_INITIALIZER;</span><br><span class="line">  </span><br><span class="line">// .m</span><br><span class="line">- (instancetype)init</span><br><span class="line">&#123;</span><br><span class="line">    return [self initWithName:@&quot;&quot;];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">- (instancetype)initWithName:(NSString *)name</span><br><span class="line">&#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        // do something</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更好的做法"><a href="#更好的做法" class="headerlink" title="更好的做法"></a>更好的做法</h3><p>如果定义<code>NS_DESIGNATED_INITIALIZER</code>，大多是不想让调用者调用父类的初始化函数，只希望通过该类指定的初始化进行初始化，这时候就可以用<code>NS_UNAVAILABLE</code>宏。</p><p>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// .h</span><br><span class="line">- (instancetype)init NS_UNAVAILABLE;</span><br><span class="line">- (instancetype)initWithName:(NSString *)name NS_DESIGNATED_INITIALIZER;</span><br></pre></td></tr></table></figure><p>如果调用者使用<code>init</code>初始化，编译器就会给出一个编译错误。使用<code>NS_UNAVAILABLE</code>后，就不需要在.m中重写父类初始化函数了。如果要允许调用者使用<code>init</code>就需要在.m中重写父类的初始化函数，如上提到的，否则就会报警告。</p><h3 id="避免使用new"><a href="#避免使用new" class="headerlink" title="避免使用new"></a>避免使用<code>new</code></h3><p>如果使用<code>new</code>来创建对象的话，即使<code>init</code>被声明为<code>NS_UNAVAILABLE</code>，也不会收到编译器的警告和错误提示了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// .h</span><br><span class="line">+ (instancetype)new NS_UNAVAILABLE;</span><br><span class="line">- (instancetype)init NS_UNAVAILABLE;</span><br><span class="line">- (instancetype)initWithName:(NSString *)name NS_DESIGNATED_INITIALIZER;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;正确使用NS-DESIGNATED-INITIALIZER&quot;&gt;&lt;a href=&quot;#正确使用NS-DESIGNATED-INITIALIZER&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS 通知 观察者移除注意点</title>
    <link rel="alternate" type="text/html" href="http://lg8294.cn/myblog/2019/10/27/iOS-%E9%80%9A%E7%9F%A5-%E8%A7%82%E5%AF%9F%E8%80%85%E7%A7%BB%E9%99%A4%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>http://lg8294.cn/myblog/2019/10/27/iOS-%E9%80%9A%E7%9F%A5-%E8%A7%82%E5%AF%9F%E8%80%85%E7%A7%BB%E9%99%A4%E6%B3%A8%E6%84%8F%E7%82%B9/</id>
    
    <author>
      <name>李刚</name>
      
      <email>lg8294@qq.com</email>
      
      
      <uri>http://lg8294.cn/myblog</uri>
      
    </author>
    
    <published>2019-10-27T07:48:27.000Z</published>
    <updated>2019-12-15T07:32:20.943Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><strong>从 iOS 9 开始，即使不移除观察者对象，程序也不会出现异常。</strong></p><p> 对于<code>addObserver</code>：要区分<code>ViewController</code>和普通<code>NSObject</code></p><ul><li><p>ViewController：在调用ViewController的<code>dealloc</code>的时候，系统会调用<code>[[NSNotificationCenter defaultCenter]removeObserver:self]</code>方法，所以如果是在viewDidLoad中使用addObserver添加监听者的话可以省掉移除。</p></li><li><p>普通NSObject：在iOS9之后，NSObject也会像ViewController一样在<code>dealloc</code>时调用<code>[[NSNotificationCenter defaultCenter]removeObserver:self]</code>方法，在iOS9之前的不会调用，需要自己写。</p><p>但是在使用类别的时候如果我们添加了通知，那么我们是没有办法在类别里面重写<code>dealloc</code>的，如果不移除通知就会出现野指针，这个时候我们就可以在iOS9以上使用<code>addObserver</code>，将通知的移除交给系统，iOS9以下使用<code>addObserverForName+weakSelf</code>，虽然通知依然存在，但是不会调用<code>doSomeThing</code>方法（不要直接在block里面写处理过程啊）。</p></li></ul></li><li><p><strong>为什么 iOS 9 之前需要手动移除观察者对象？</strong></p><p> 观察者注册时，通知中心并不会对观察者对象做 retain 操作，而是对观察者对象进行unsafe_unretained 引用。</p><p> <strong>什么是unsafe_unretained？</strong></p><p> 因为 Cocoa 和 Cocoa Touch 中的一些类仍然还没有支持 weak 引用。所以，当我们想对这些类使用弱引用的时候，只能用unsafe_unretained来替代。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// for attribute</span><br><span class="line">@property (unsafe_unretained) NSObject *unsafeProperty;</span><br><span class="line"></span><br><span class="line">// for variables</span><br><span class="line">NSObject *__unsafe_unretained unsafeReference;</span><br></pre></td></tr></table></figure></li></ol><pre><code>不安全引用（unsafe reference）和弱引用 (weak reference) 类似，它并不会让被引用的对象保持存活，但是和弱引用不同的是，当被引用的对象释放的时，不安全引用并不会自动被置为 nil，这就意味着它变成了野指针，而对野指针发送消息会导致程序崩溃。因此，观察者对象在释放之前必须从通知中心移除引用，否则通知中心就会给野指针所引用的对象发送消息，导致程序崩溃。既然如此，为什么通知中心不对观察者对象进行弱引用呢？我们刚才已经提到，Cocoa 和 Cocoa Touch 中的一些类还没有支持弱引用，所以采用不安全的引用只是为了兼容旧的版本。从 iOS 9 开始通知中心会对观察者进行弱引用，所以不需要在观察者对象释放之前从通知中心移除。但是，通过`-[NSNotificationCenter addObserverForName:object:queue:usingBlock]`方法注册的观察者依然需要手动的释放，因为通知中心对它们持有的是强引用。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;从 iOS 9 开始，即使不移除观察者对象，程序也不会出现异常。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS 面试题汇总</title>
    <link rel="alternate" type="text/html" href="http://lg8294.cn/myblog/2019/10/10/iOS-%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://lg8294.cn/myblog/2019/10/10/iOS-%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</id>
    
    <author>
      <name>李刚</name>
      
      <email>lg8294@qq.com</email>
      
      
      <uri>http://lg8294.cn/myblog</uri>
      
    </author>
    
    <published>2019-10-10T02:46:19.000Z</published>
    <updated>2019-10-27T07:11:06.522Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://blog.csdn.net/gsl111000/article/details/93629640" target="_blank" rel="noopener">https://blog.csdn.net/gsl111000/article/details/93629640</a></p><ol><li><p>简单介绍下 NSURLConnection 类及+ sendSynchronousRequest:returningResponse:error:与– initWithRequest:delegate:两个方法的区别?</p><blockquote><p>答: NSURLConnection主要用于网络访问，其中+ sendSynchronousRequest:returningResponse:error:是同步访问数据，即当前线程会阻塞，并等待request的返回的response，而– initWithRequest:delegate:使用的是异步加载，当其完成网络访问后，会通过delegate回到主线程，并其委托的对象。</p></blockquote></li><li><p>在项目什么时候选择使用GCD，什么时候选择NSOperation</p><blockquote><p>答: 项目中使用NSOperation的优点是NSOperation是对线程的高度抽象，在项目中使用它，会使项目的程序结构更好，子类化NSOperation的设计思路，是具有面向对象的优点(复用、封装)，使得实现是多线程支持，而接口简单，建议在复杂项目中使用。<br> 项目中使用GCD的优点是GCD本身非常简单、易用，对于不复杂的多线程操作，会节省代码量，而Block参数的使用，会是代码更为易读，建议在简单项目中使用。</p></blockquote></li><li><p>ViewController的didReceiveMemoryWarning怎么被调用</p><blockquote><p>答:[supper didReceiveMemoryWarning];</p></blockquote></li><li><p>写一个setter方法用于完成@property(nonatomic, retain) NSString <em>name,写一个setter方法用于完成@property(nonatomic, copy) NSString </em>name</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)setName:(NSString *)str&#123;</span><br><span class="line">    [str retain];</span><br><span class="line">    [_name release];</span><br><span class="line">    _name = str;</span><br><span class="line">&#125;</span><br><span class="line">- (void)setName:(NSString *)str&#123;</span><br><span class="line">    id t = [str copy];</span><br><span class="line">    [_name release];</span><br><span class="line">    _name = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于语句NSString *obj = [[NSData alloc] init]; obj在编译时和运行时分别时什么类型的对象?</p><blockquote><p>答： 编译时是NSString的类型;运行时是NSData类型的对象</p></blockquote></li><li><p>Object C中创建线程的方法是什么?如果在主线程中执行代码，方法是什么?如果想延时执行代码、方法又是什么?</p><blockquote><p>答：线程创建有三种方法：使用NSThread创建、使用GCD的dispatch、使用子类化的NSOperation,然后将其加入NSOperationQueue;在主线程执行代码，方法是performSelectorOnMainThread，如果想延时执行代码可以用performSelector:onThread:withObject:waitUntilDone:</p></blockquote></li><li><p>浅复制和深复制的区别?</p><blockquote><p>答：浅层复制：只复制指向对象的指针，而不复制引用对象本身。<br>深层复制：复制引用对象本身。</p></blockquote></li><li><p>PerformSelecter</p><blockquote><p>当调用 NSObject 的 performSelecter:afterDelay: 后，实际上其内部会创建一个 Timer 并添加到当前线程的 RunLoop 中。所以如果当前线程没有 RunLoop，则这个方法会失效。<br>当调用performSelector:onThread:时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 RunLoop 该方法也会失效。</p></blockquote></li><li><p>优化你是从哪几方面着手？</p><blockquote><p>一、首页启动速度<br> 启动过程中做的事情越少越好（尽可能将多个接口合并）<br> 不在UI线程上作耗时的操作（数据的处理在子线程进行，处理完通知主线程刷新节目）<br> 在合适的时机开始后台任务（例如在用户指引节目就可以开始准备加载的数据）<br> 二、页面浏览速度<br> json的处理（iOS 自带的NSJSONSerialization，Jsonkit，SBJson）<br> 数据的分页（后端数据多的话，就要分页返回，例如网易新闻，或者 微博记录）<br> 数据压缩（大数据也可以压缩返回，减少流量，加快反应速度）<br> 内容缓存（例如网易新闻的最新新闻列表都是要缓存到本地，从本地加载，可以缓存到内存，或者数据库，根据情况而定）<br> 延时加载tab（比如app有5个tab，可以先加载第一个要显示的tab，其他的在显示时候加载，按需加载）<br> 算法的优化（核心算法的优化，例如有些app 有个 联系人姓名用汉语拼音的首字母排序）<br> 三、操作流畅度优化<br> Tableview 优化（tableview cell的加载优化）<br> ViewController加载优化（不同view之间的跳转，可以提前准备好数据）<br> 四、数据库的优化<br> 数据库设计上面的重构<br> 查询语句的优化<br> 分库分表（数据太多的时候，可以分不同的表或者库）<br> 五、服务器端和客户端的交互优化<br> 客户端尽量减少请求<br> 服务端尽量做多的逻辑处理<br> 服务器端和客户端采取推拉结合的方式（可以利用一些同步机制）<br> 通信协议的优化（减少报文的大小）<br> 电量使用优化（尽量不要使用后台运行）<br> 六、非技术性能优化<br> 产品设计的逻辑性（产品的设计一定要符合逻辑，或者逻辑尽量简单，否则会让程序员抓狂，有时候用了好大力气，才可以完成一个小小的逻辑设计问题）<br> 界面交互的规范（每个模块的界面的交互尽量统一，符合操作习惯）<br> 代码规范（这个可以隐形带来app 性能的提高，比如 用if else 还是switch ，或者是用！还是 ＝＝）<br> code review（坚持code Review 持续重构代码。减少代码的逻辑复杂度）</p></blockquote></li><li><p>什么情况使用 weak 关键字，相比 assign 有什么不同？</p><blockquote><p>1.在ARC中,在有可能出现循环引用的时候,往往要通过让其中一端使用 weak 来解决,比如: delegate 代理属性。<br>2.自身已经对它进行一次强引用,没有必要再强引用一次,此时也会使用 weak,如自定义 IBOutlet 控件属性一般也使用 weak；当然，也可以使用strong。<br>IBOutlet连出来的视图属性为什么可以被设置成weak?<br>答：因为父控件的subViews数组已经对它有一个强引用。<br>不同点<br>assign 可以用非 OC 对象，而 weak 必须用于 OC 对象。<br>weak 表明该属性定义了一种“非拥有关系”。在属性所指的对象销毁时，属性值会自动清空(nil)</p></blockquote></li><li><p>用@property声明的 NSString / NSArray / NSDictionary 经常使用 copy 关键字，为什么？如果改用strong关键字，可能造成什么问题？</p><blockquote><p>答：用 @property 声明 NSString、NSArray、NSDictionary 经常使用 copy 关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，他们之间可能进行赋值操作（就是把可变的赋值给不可变的），为确保对象中的字符串值不会无意间变动，应该在设置新属性值时拷贝一份。<br>1.因为父类指针可以指向子类对象,使用 copy 的目的是为了让本对象的属性不受外界影响,使用 copy 无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本。<br>2.如果我们使用是 strong ,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性。<br>总结：使用copy的目的是，防止把可变类型的对象赋值给不可变类型的对象时，可变类型对象的值发送变化会无意间篡改不可变类型对象原来的值。</p></blockquote></li><li><p>runtime如何实现weak变量的自动置nil？</p><blockquote><p>runtime对注册的类，会进行布局，会将 weak 对象放入一个 hash 表中。用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会调用对象的 dealloc 方法，假设 weak 指向的对象内存地址是a，那么就会以a为key，在这个 weak hash表中搜索，找到所有以a为key的 weak 对象，从而设置为nil</p></blockquote></li><li><p>runloop是什么／runloop的概念？</p><blockquote><p>runloop是线程相关的基础框架的一部分。一个runloop就是一个事件处理的循环，用来不停的调度工作以及处理输入事件。其实内部就是do－while循环，这个循环内部不断地处理各种任务（比如Source，Timer，Observer）。使用runloop的目的是让你的线程在有工作的时候忙于工作，而没工作的时候处于休眠状态。</p></blockquote></li><li><p>UITableViewCell上有个UILabel，显示NSTimer实现的秒表时间，手指滚动cell过程中，label是否刷新，为什么？</p><blockquote><p>这是否刷新取决于timer加入到Run Loop中的Mode是什么。Mode主要是用来指定事件在运行循环中的优先级的，分为<br>NSDefaultRunLoopMode（kCFRunLoopDefaultMode）：默认，空闲状态<br>UITrackingRunLoopMode：ScrollView滑动时会切换到该Mode<br>UIInitializationRunLoopMode：run loop启动时，会切换到该mode<br>NSRunLoopCommonModes（kCFRunLoopCommonModes）：Mode集合<br>苹果公开提供的Mode有两个<br>NSDefaultRunLoopMode（kCFRunLoopDefaultMode）<br>NSRunLoopCommonModes（kCFRunLoopCommonModes）<br>在编程中：如果我们把一个NSTimer对象以NSDefaultRunLoopMode（kCFRunLoopDefaultMode）添加到主运行循环中的时候, ScrollView滚动过程中会因为mode的切换，而导致NSTimer将不再被调度。当我们滚动的时候，也希望不调度，那就应该使用默认模式。但是，如果希望在滚动时，定时器也要回调，那就应该使用common mode。</p></blockquote></li><li><p>NStimer准吗？谈谈你的看法？如果不准该怎样实现一个精确的NSTimer?</p><blockquote><p>不准；不准的原因如下<br>1、NSTimer加在main runloop中，模式是NSDefaultRunLoopMode，main负责所有主线程事件，例如UI界面的操作，复杂的运算，这样在同一个runloop中timer就会产生阻塞。<br>2、模式的改变。主线程的 RunLoop 里有两个预置的 Mode：kCFRunLoopDefaultMode 和 UITrackingRunLoopMode。<br>当你创建一个 Timer 并加到 DefaultMode 时，Timer 会得到重复回调，但此时滑动一个ScrollView时，RunLoop 会将 mode 切换为 TrackingRunLoopMode，这时 Timer 就不会被回调，并且也不会影响到滑动操作。所以就会影响到NSTimer不准的情况。<br>PS:DefaultMode 是 App 平时所处的状态，rackingRunLoopMode 是追踪 ScrollView 滑动时的状态。<br>方法：<br>1、在主线程中进行NSTimer操作，但是将NSTimer实例加到main runloop的特定mode（模式）中。避免被复杂运算操作或者UI界面刷新所干扰self.timer = [NSTimer timerWithTimeInterval:1 target:self selector:@selector(showTime) userInfo:nil repeats:YES];<br>[[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];<br>2、在子线程中进行NSTimer的操作，再在主线程中修改UI界面显示操作结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-(void)timerMethod2 &#123;</span><br><span class="line">    NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(newThread) object:nil];</span><br><span class="line">    [thread start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)newThread&#123;</span><br><span class="line">    @autoreleasepool&#123;</span><br><span class="line">        [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(showTime) userInfo:nil repeats:YES];</span><br><span class="line">        [[NSRunLoop currentRunLoop] run];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>NSOperation 相比于 GCD 有哪些优势？</p><blockquote><p>GCD是基于c的底层api，NSOperation属于object-c类。ios 首先引入的是NSOperation，IOS4之后引入了GCD和NSOperationQueue并且其内部是用gcd实现的。<br>相对于GCD：<br>1、NSOperation拥有更多的函数可用，具体查看api。<br>2、在NSOperationQueue中，可以建立各个NSOperation之间的依赖关系。<br>3、有kvo可以监测operation是否正在执行（isExecuted）、是否结束（isFinished），是否取消（isCanceld）。<br>4、NSOperationQueue可以方便的管理并发、NSOperation之间的优先级。<br>GCD主要与block结合使用。代码简洁高效。<br>GCD也可以实现复杂的多线程应用，主要是建立个个线程时间的依赖关系这类的情况，但是需要自己实现相比NSOperation要复杂。<br>具体使用哪个，依需求而定。 从个人使用的感觉来看，比较合适的用法是：除了依赖关系尽量使用GCD，因为苹果专门为GCD做了性能上面的优化。</p></blockquote></li><li><p>如何访问并修改一个类的私有属性?</p><blockquote><p>有两种方法可以访问私有属性,一种是通过KVC获取,一种是通过runtime访问并修改私有属性。</p></blockquote></li><li><p>如何捕获异常？</p><blockquote><p>1.在app启动时(didFinishLaunchingWithOptions)，添加一个异常捕获的监听<br>NSSetUncaughtExceptionHandler(&amp;UncaughtExceptionHandler);<br>2.实现捕获异常日志并保存到本地的方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void UncaughtExceptionHandler(NSException *exception)&#123;</span><br><span class="line">    //异常日志获取</span><br><span class="line">    NSArray  *excpArr = [exception callStackSymbols];</span><br><span class="line">    NSString *reason = [exception reason];</span><br><span class="line">    NSString *name = [exception name];</span><br><span class="line">    NSString *excpCnt = [NSString stringWithFormat:@&quot;exceptionType: %@ \n reason: %@ \n stackSymbols: %@&quot;,name,reason,excpArr];</span><br><span class="line">    //日常日志保存（可以将此功能单独提炼到一个方法中）</span><br><span class="line">    NSArray  *dirArr  = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);</span><br><span class="line">    NSString *dirPath = dirArr[0];</span><br><span class="line">    NSString *logDir = [dirPath stringByAppendingString:@&quot;/CrashLog&quot;];</span><br><span class="line"></span><br><span class="line">    BOOL isExistLogDir = YES;</span><br><span class="line">    NSFileManager *fileManager = [NSFileManager defaultManager];</span><br><span class="line">    if (![fileManager fileExistsAtPath:logDir]) &#123;</span><br><span class="line">        isExistLogDir = [fileManager createDirectoryAtPath:logDir withIntermediateDirectories:YES attributes:nil error:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    if (isExistLogDir) &#123;</span><br><span class="line">        //此处可扩展</span><br><span class="line">        NSString *logPath = [logDir stringByAppendingString:@&quot;/crashLog.txt&quot;];</span><br><span class="line">        [excpCnt writeToFile:logPath atomically:YES encoding:NSUTF8StringEncoding error:nil];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Object-c的类可以多重继承么?可以实现多个接口么?Category是什么?重写一个类的方式用继承好还是分类好?为什么?</p><blockquote><p>答：Object-c的类不可以多重继承;可以实现多个接口，通过实现多个接口可以完成C++的多重继承;Category是类别，一般情况用分类好，用Category去重写类的方法，仅对本Category有效，不会影响到其他类与原有类的关系。</p></blockquote></li><li><p>Category(分类)，Extension(扩展)和继承的区别</p><blockquote><p>答：1.分类<br>category原则上只能在现有类基础上添加新的方法（能添加属性的原因只是通过runtime解决无setter/getter的问题而已），类别中的方法没被实现编译器是不会有任何警告的，这是因为类别是在运行时添加到类中的<br>2.扩展<br>iOS中的extension就是匿名的分类，只有头文件没有实现文件。类扩展不仅可以增加方法，还可以增加实例变量（或者属性），只是该实例变量默认是@private类型的（使用范围只能在自身类，而不是子类或其他地方），类扩展中声明的方法没被实现，编译器会报警，这是因为类扩展是在编译阶段被添加到类中的<br>3.继承<br>在iOS中继承是单继承，既只能有一个父类。在继承中，子类可以使用父类的方法和变量，当子类想对本类或者父类的变量进行初始化，那么需要重写init()方法 。父类也可以访问子类的方法和成员变量</p></blockquote></li><li><p>简述内存分区情况</p><blockquote><p>1). 代码区：存放函数二进制代码<br>2). 数据区：系统运行时申请内存并初始化，系统退出时由系统释放。存放全局变量、静态变量、常量<br>3). 堆区：通过malloc等函数或new等操作符动态申请得到，需程序员手动申请和释放<br>4). 栈区：函数模块内申请，函数结束时由系统自动释放。存放局部变量、函数参数</p></blockquote></li><li><p>直接调用_objc_msgForward函数将会发生什么？</p><blockquote><p>_objc_msgForward是 IMP 类型，用于消息转发的：当向一个对象发送一条消息，但它并没有实现的时候，_objc_msgForward会尝试做消息转发。<br>直接调用_objc_msgForward是非常危险的事，如果用不好会直接导致程序Crash，但是如果用得好，能做很多非常酷的事。<br>一旦调用_objc_msgForward，将跳过查找 IMP 的过程，直接触发“消息转发”，如果调用了_objc_msgForward，即使这个对象确实已经实现了这个方法，你也会告诉objc_msgSend：“我没有在这个对象里找到这个方法的实现”</p></blockquote></li><li><p>对于Run Loop的理解</p><blockquote><p>RunLoop，是多线程的法宝，即一个线程一次只能执行一个任务，执行完任务后就会退出线程。主线程执行完即时任务时会继续等待接收事件而不退出。非主线程通常来说就是为了执行某一任务的，执行完毕就需要归还资源，因此默认是不运行RunLoop的；<br>每一个线程都有其对应的RunLoop，只是默认只有主线程的RunLoop是启动的，其它子线程的RunLoop默认是不启动的，若要启动则需要手动启动；<br>在一个单独的线程中，如果需要在处理完某个任务后不退出，继续等待接收事件，则需要启用RunLoop；<br>NSRunLoop提供了一个添加NSTimer的方法，可以指定Mode，如果要让任何情况下都回调，则需要设置Mode为Common模式；<br>实质上，对于子线程的runloop默认是不存在的，因为苹果采用了懒加载的方式。如果我们没有手动调用[NSRunLoop currentRunLoop]的话，就不会去查询是否存在当前线程的RunLoop，也就不会去加载，更不会创建。</p></blockquote></li><li><p>runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）</p><blockquote><p>1.每一个类对象中都一个对象方法列表（对象方法缓存）<br>2.类方法列表是存放在类对象中isa指针指向的元类对象中（类方法缓存）<br>3.方法列表中每个方法结构体中记录着方法的名称,方法实现,以及参数类型，其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现.<br>4.当我们发送一个消息给一个NSObject对象时，这条消息会在对象的类对象方法列表里查找<br>5.当我们发送一个消息给一个类时，这条消息会在类的Meta Class对象的方法列表里查找</p></blockquote></li><li><p>runtime 中，SEL 和 IMP 的区别</p><blockquote><p>方法名 SEL – 表示该方法的名称；<br>IMP – 指向该方法的具体实现的函数指针，说白了IMP就是实现方法。</p></blockquote></li><li><p>block底层实现</p><blockquote><p>block本质是指向一个结构体的一个指针<br>运行时机制 比较高级的特性 纯C语言<br>平时写的OC代码 转换成C语言运行时的代码<br>指令:clang -rewrite-objc main.m(可以打印验证)<br>默认情况下,任何block都是在栈里面的,随时可能被回收<br>只要对其做一次copy操作 block的内存就会放在堆里面 不会释放<br>只有copy才能产生一个新的内存地址 所有地址会发生改变</p></blockquote></li><li><p>TCP协议三次握手</p><blockquote><p>TCP协议采用了三次握手策略。用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了TCP的标志——SYN(synchronize)和ACK(acknowledgement)。发送端首先发送一个带SYN标志的数据包给对方。接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。最后，发送端再回传一个带ACK标志的数据包，代表“握手”结束。</p></blockquote></li><li><p>@property 的本质是什么？</p><blockquote><p>@property = ivar + getter + setter;<br>“属性” (property)有两大概念：ivar（实例变量）、getter+setter（存取方法）</p></blockquote></li><li><p>KVC的底层实现？</p><blockquote><p>当一个对象调用setValue方法时，方法内部会做以下操作：<br>1). 检查是否存在相应的key的set方法，如果存在，就调用set方法。<br>2). 如果set方法不存在，就会查找与key相同名称并且带下划线的成员变量，如果有，则直接给成员变量属性赋值。<br>3). 如果没有找到_key，就会查找相同名称的属性key，如果有就直接赋值。<br>4). 如果还没有找到，则调用valueForUndefinedKey:和setValue:forUndefinedKey:方法。<br>这些方法的默认实现都是抛出异常，我们可以根据需要重写它们。</p></blockquote></li><li><p>ViewController生命周期</p><blockquote><p>按照执行顺序排列：<br>1). initWithCoder：通过nib文件初始化时触发。<br>2). awakeFromNib：nib文件被加载的时候，会发生一个awakeFromNib的消息到nib文件中的每个对象。<br>3). loadView：开始加载视图控制器自带的view。<br>4). viewDidLoad：视图控制器的view被加载完成。<br>5). viewWillAppear：视图控制器的view将要显示在window上。<br>6). updateViewConstraints：视图控制器的view开始更新AutoLayout约束。<br>7). viewWillLayoutSubviews：视图控制器的view将要更新内容视图的位置。<br>8). viewDidLayoutSubviews：视图控制器的view已经更新视图的位置。<br>9). viewDidAppear：视图控制器的view已经展示到window上。<br>10). viewWillDisappear：视图控制器的view将要从window上消失。<br>11). viewDidDisappear：视图控制器的view已经从window上消失。</p></blockquote></li><li><p>如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）</p><blockquote><p>// 使用Dispatch Group追加block到Global Group Queue,这些block如果全部执行完毕，就会执行Main Dispatch Queue中的结束处理的block。<br>// 创建队列组<br>dispatch_group_t group = dispatch_group_create();<br>// 获取全局并发队列<br>dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);<br>dispatch_group_async(group, queue, ^{ /<em>加载图片1 </em>/ });<br>dispatch_group_async(group, queue, ^{ /<em>加载图片2 </em>/ });<br>dispatch_group_async(group, queue, ^{ /<em>加载图片3 </em>/ });<br>// 当并发队列组中的任务执行完毕后才会执行这里的代码<br>dispatch_group_notify(group, dispatch_get_main_queue(), ^{<br>// 合并图片<br>});</p></blockquote></li><li><p>dispatch_barrier_async（栅栏函数）的作用是什么？</p><blockquote><p>函数定义：dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block);<br>作用：<br>1.在它前面的任务执行结束后它才执行，它后面的任务要等它执行完成后才会开始执行。<br>2.避免数据竞争</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 1.创建并发队列</span><br><span class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;myQueue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">// 2.向队列中添加任务</span><br><span class="line">dispatch_async(queue, ^&#123;  // 1.2是并行的</span><br><span class="line">    NSLog(@&quot;任务1, %@&quot;,[NSThread currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;任务2, %@&quot;,[NSThread currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&gt;dispatch_barrier_async(queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;任务 barrier, %@&quot;, [NSThread currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&gt;dispatch_async(queue, ^&#123;   // 这两个是同时执行的</span><br><span class="line">    NSLog(@&quot;任务3, %@&quot;,[NSThread currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;任务4, %@&quot;,[NSThread currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 输出结果: 任务1 任务2 ——》 任务 barrier ——》任务3 任务4 </span><br><span class="line">// 其中的任务1与任务2，任务3与任务4 由于是并行处理先后顺序不定。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;原文链接：&lt;a href=&quot;https://blog.csdn.net/gsl111000/article/details/93629640&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>.dmg制作流程</title>
    <link rel="alternate" type="text/html" href="http://lg8294.cn/myblog/2018/07/27/dmg%E5%88%B6%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    <id>http://lg8294.cn/myblog/2018/07/27/dmg%E5%88%B6%E4%BD%9C%E6%B5%81%E7%A8%8B/</id>
    
    <author>
      <name>李刚</name>
      
      <email>lg8294@qq.com</email>
      
      
      <uri>http://lg8294.cn/myblog</uri>
      
    </author>
    
    <published>2018-07-27T06:55:21.000Z</published>
    <updated>2019-09-10T14:46:58.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dmg-制作流程"><a href="#dmg-制作流程" class="headerlink" title=".dmg 制作流程"></a>.dmg 制作流程</h1><ol><li><p>打开磁盘工具，新建空白磁盘，保存到桌面<br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15217911410964.jpg" alt><br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15217911974362.jpg" alt></p></li><li><p>打开 tmp，放入需要打包的资源</p></li><li><p>设置图标。右键桌面上的 tmp 磁盘，点击<code>显示简介</code>，拖动图标到图示位置<br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15217915145273.jpg" alt><br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15217916135987.jpg" alt></p></li><li><p>设置背景图片和图标大小。在 tmp 文件夹中点击右键，选择<code>查看显示选项</code>，拖动背景图片到图示位置<br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15217917390625.jpg" alt><br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15217918498790.jpg" alt></p></li><li><p>打包成只读 dmp 文件。关闭 tmp 文件夹，推出 tmp，点击磁盘工具的转换按键，选中桌面的 tmp.dmg 文件，保存 “tmp”已转换.dmg 到桌面。至此就完成了 dmg 文件的制作。<br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15217920482902.jpg" alt><br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15217920940345.jpg" alt></p></li></ol><p>放个效果图：<br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15217923175192.jpg" alt></p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15217922774462.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;dmg-制作流程&quot;&gt;&lt;a href=&quot;#dmg-制作流程&quot; class=&quot;headerlink&quot; title=&quot;.dmg 制作流程&quot;&gt;&lt;/a&gt;.dmg 制作流程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开磁盘工具，新建空白磁盘，保存到桌面&lt;br&gt;&lt;img
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ReactNative iOS原生模块开发流程</title>
    <link rel="alternate" type="text/html" href="http://lg8294.cn/myblog/2018/07/27/ReactNative-iOS%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    <id>http://lg8294.cn/myblog/2018/07/27/ReactNative-iOS%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</id>
    
    <author>
      <name>李刚</name>
      
      <email>lg8294@qq.com</email>
      
      
      <uri>http://lg8294.cn/myblog</uri>
      
    </author>
    
    <published>2018-07-27T06:51:36.000Z</published>
    <updated>2019-09-10T14:46:58.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactNative-iOS原生模块开发流程"><a href="#ReactNative-iOS原生模块开发流程" class="headerlink" title="ReactNative iOS原生模块开发流程"></a>ReactNative iOS原生模块开发流程</h1><p>最近要开发 RN 的组件，查看了官方原生组件的开发说明文档，发现侧重点是在编写原生代码这部分，缺少环境的搭建流程，所以查了一些资料，整理一个环境搭建的流程。</p><p>整个流程基本上分以下几步：</p><ol><li>创建 RN 项目（用来调试模块）；</li><li>创建原生模块项目；</li><li>RN 项目中引入原生模块项目；</li><li>开发原生模块（参照 RN 官方文档）；</li><li>发布上线；</li></ol><h2 id="创建-RN-工程"><a href="#创建-RN-工程" class="headerlink" title="创建 RN 工程"></a>创建 RN 工程</h2><p>首先通过 CLI 创建一个 RN 项目，在开发原生模块的过程中会用这个工程来进行调试。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init ExampleModule</span><br></pre></td></tr></table></figure><h2 id="创建原生模块项目"><a href="#创建原生模块项目" class="headerlink" title="创建原生模块项目"></a>创建原生模块项目</h2><p>通过网上的资料，我发现创建原生模块项目有2种简便方法，通过2种方式创建项目，可以省去手动配置项目的工作，极大的减少可能出错的环节。</p><h3 id="通过-RN-的-CLI-创建"><a href="#通过-RN-的-CLI-创建" class="headerlink" title="通过 RN 的 CLI 创建"></a>通过 RN 的 CLI 创建</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#react-native new-library --name &lt;yourLibraryName&gt;</span></span><br></pre></td></tr></table></figure><p>命令执行后，可以在<code>./Libraries</code>下面找到创建的原生项目，<strong>这种方式只支持 iOS 项目</strong>。</p><h3 id="通过-react-native-create-library-来创建"><a href="#通过-react-native-create-library-来创建" class="headerlink" title="通过 react-native-create-library 来创建"></a>通过 react-native-create-library 来创建</h3><ol><li><p>安装<code>react-native-create-library</code>；</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g react-native-create-library</span><br></pre></td></tr></table></figure></li><li><p>进入你要存放原生模块的目录（建议是 <code>Libraries</code>），执行下面的命令；</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native-create-library &lt;yourLibraryName&gt;</span><br></pre></td></tr></table></figure></li></ol><p>这种方式创建的项目中包含<code>iOS</code>、<code>Android</code>、<code>Windows</code>三个文件夹，对应三个平台。如果是开发跨平台的模块，建议使用这种方式。</p><h2 id="RN-项目中引入原生模块项目"><a href="#RN-项目中引入原生模块项目" class="headerlink" title="RN 项目中引入原生模块项目"></a>RN 项目中引入原生模块项目</h2><p>这里只是开发 <code>iOS</code> 模块，所以直接使用方式一创建原生模块项目。<code>ExampleModule</code> 是 RN 项目，<code>MyFirstRNModule</code> 是原生模块。现在文件结构如下图：</p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15245383675028.jpg" alt></p><p>用 <code>xcode</code> 打开 <code>ExampleModule/ios</code> 下的 iOS 工程，添加 <code>MyFirstRNModule</code> 到<code>Libraries</code> 文件夹下，如下图：</p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15245390726193.jpg" alt></p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15245391049749.jpg" alt></p><p>链接 <code>MyFristRNModule</code> 到 <code>ExampleModule</code> 工程中：</p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15245394525224.jpg" alt></p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15245394784670.jpg" alt></p><p>至此，RN 项目就引入了原生模块项目。</p><h2 id="编写原生模块代码"><a href="#编写原生模块代码" class="headerlink" title="编写原生模块代码"></a>编写原生模块代码</h2><p>这一部分按照 <a href="http://facebook.github.io/react-native/docs/native-modules-ios.html" target="_blank" rel="noopener">RN 官方教程</a>来编写原生模块代码。</p><p>在这里只做个简单的测试，看是否可以调用到这个模块。</p><ol><li><p>打开<code>MyFirstRNModule.m</code>文件，添加代码，然后使用模拟器运行；</p><p> <img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15245402331526.jpg" alt></p></li><li><p>修改 RN 项目中的<code>App.js</code>；</p><p> <img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15245408646258.jpg" alt></p></li><li><p>选中模拟器，<code>cmd+R</code> 刷新界面；</p><p> <img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15245409912857.jpg" alt></p></li><li><p>点击 <code>test</code> 按键，注意观察 xcode 的调试窗口，这时会打印一条 <code>test</code> 信息出来，说明模块运行正确；</p><p> <img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15245415527519.jpg" alt></p></li></ol><h2 id="发布上线"><a href="#发布上线" class="headerlink" title="发布上线"></a>发布上线</h2><p>编写好原生模块之后，就可以发布到 npm，这样其他人就可以下载使用。</p><ol><li>创建模块的 GitHub 仓库</li><li><p>修改模块的入口文件</p><p> 目录下已经有了 <code>MyFirstRNModule.ios.js</code> 可以作为入口文件，但是发布到 npm 上的包都是以 <code>index.js</code> 作为入口文件的，因此创建 <code>index.js</code>，将原生模块导出。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; NativeModules &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = NativeModules.MyFirstRNModule;</span><br></pre></td></tr></table></figure></li><li><p>发布到 npm</p><p> 发布之前，需要先编辑 <code>package.json</code> 来配置原生模块的信息，如下：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"my-first-rn-module"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"keywords"</span>: <span class="string">"react-native"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"lg"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/lg8294/MyFirstRNModule.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"https://github.com/lg8294/MyFirstRNModule"</span>,</span><br><span class="line">  <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/lg8294/MyFirstRNModule/issues"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 注：其中的 <code>name</code> 要采用 <code>kebab-case</code> 格式，否则发布的时候会报错。<br> 如果编写的原生模块依赖于其他的原生模块，需要在 package.json 添加依赖关系，这里由于没有相关依赖，所以不需要添加：</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如果没有npm的账号，先注册一个账号，这个账号会被添加到npm本地的配置中，用来发布module用。</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br><span class="line">Username: your name</span><br><span class="line">Password: your password</span><br><span class="line">Email: yourmail@gmail.com</span><br></pre></td></tr></table></figure><p> 发布：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p> 有时候，有些文件没必要发布，例如 MyFirstRNModule.ios.js 和 MyFirstRNModule.android.js 文件，可以通过 .npmignore 忽略它。例如我这里 .npmignore 文件内容如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">.gitignore</span><br><span class="line">MyFirstRNModule.ios.js</span><br><span class="line">MyFirstRNModule.android.js</span><br></pre></td></tr></table></figure></li><li><p>添加 README</p><p> README 文件是非常重要的，如果没有 README 文件，别人看到这个组件，根本就不知道它是用来做什么的。所以，很有必要添加一个 README 文件，这个文件需要告诉别人这个原生组件是干什么的、如何安装、API、使用手册等等。</p></li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://chasecs.github.io/2017/08/09/react_native_packing_native_module_for_android_n_ios.html" target="_blank" rel="noopener">React Native 原生模块库打包指南</a><br><a href="http://www.liuchungui.com/blog/2016/05/02/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-iospian/" target="_blank" rel="noopener">ReactNative之原生模块开发并发布——iOS篇</a><br><a href="http://www.devio.org/2017/01/22/React-Native-iOS%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E6%95%99%E7%A8%8B-%E5%BF%83%E5%BE%97/" target="_blank" rel="noopener">如何创建React Native iOS原生模块</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;ReactNative-iOS原生模块开发流程&quot;&gt;&lt;a href=&quot;#ReactNative-iOS原生模块开发流程&quot; class=&quot;headerlink&quot; title=&quot;ReactNative iOS原生模块开发流程&quot;&gt;&lt;/a&gt;ReactNative
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Jenkins构建iOS应用并上传蒲公英</title>
    <link rel="alternate" type="text/html" href="http://lg8294.cn/myblog/2018/07/27/%E4%BD%BF%E7%94%A8Jenkins%E6%9E%84%E5%BB%BAiOS%E5%BA%94%E7%94%A8%E5%B9%B6%E4%B8%8A%E4%BC%A0%E8%92%B2%E5%85%AC%E8%8B%B1/"/>
    <id>http://lg8294.cn/myblog/2018/07/27/%E4%BD%BF%E7%94%A8Jenkins%E6%9E%84%E5%BB%BAiOS%E5%BA%94%E7%94%A8%E5%B9%B6%E4%B8%8A%E4%BC%A0%E8%92%B2%E5%85%AC%E8%8B%B1/</id>
    
    <author>
      <name>李刚</name>
      
      <email>lg8294@qq.com</email>
      
      
      <uri>http://lg8294.cn/myblog</uri>
      
    </author>
    
    <published>2018-07-27T06:36:45.000Z</published>
    <updated>2019-09-10T14:46:58.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Jenkins-构建-iOS-应用并上传蒲公英"><a href="#使用-Jenkins-构建-iOS-应用并上传蒲公英" class="headerlink" title="使用 Jenkins 构建 iOS 应用并上传蒲公英"></a>使用 Jenkins 构建 iOS 应用并上传蒲公英</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在 Mac 上推荐使用 <code>brew</code> 来安装 <code>jenkins</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install jenkins</span><br></pre></td></tr></table></figure><p>可以选择 <code>lts</code> 版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install jenkins-lts</span><br></pre></td></tr></table></figure><h2 id="第一次启动"><a href="#第一次启动" class="headerlink" title="第一次启动"></a>第一次启动</h2><p>通过 <code>brew</code> 安装成功后，在系统环境变量中会有 <code>jenkins</code>（或 <code>jenkins-lts</code>），执行命令就可以启动了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jenkins</span><br></pre></td></tr></table></figure><p>执行命令之后，不要关闭命令行窗口，否则这个服务就被关闭了。在命令行窗口中会有一条重要的信息，一条字符串信息，下面的步骤会用到。</p><p>通过浏览器访问 <code>http://localhost:8080</code>，会出现如下界面：<br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326539274571.png" alt></p><p>这个界面要求输入管理员密码，这个密码就是之前命令行中的那个字符串，或者安装界面红色信息提示的，打开对应的文件，拷贝里面的字符串，填入这里的输入框中，点击 <code>Continue</code>。</p><p>然后会显示自定义 Jenkins 的界面，其实就是安装 Plugins，Jenkins 的所有功能基本都是通过 Plugin 来实现的，所以这里现在第一项，<code>Install suggested plugins</code>：</p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326546010952.jpg" alt><br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326546219760.jpg" alt><br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326546264089.jpg" alt><br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326546499338.jpg" alt><br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326546826845.jpg" alt></p><p>到这里，输入用户名、密码、邮箱，创建第一个 Admin 用户。</p><h2 id="配置-iOS-构建项目"><a href="#配置-iOS-构建项目" class="headerlink" title="配置 iOS 构建项目"></a>配置 iOS 构建项目</h2><p>构建 iOS 项目的方式有多种，下面是最长用的2种：</p><ol><li>通过 Xcode Plugin;</li><li>通过 shell 脚本执行 fastlane；</li></ol><p>这里只说一下第一种方式。</p><h3 id="安装-Xcode-integration-插件"><a href="#安装-Xcode-integration-插件" class="headerlink" title="安装 Xcode integration 插件"></a>安装 <code>Xcode integration</code> 插件</h3><p>首先选择”系统管理“-&gt;”插件管理“-&gt;”可选插件“中搜索 <code>Xcode integration</code> 安装。<br>安装完成之后，我们需要先去”系统管理“-&gt;”系统设置“里面配置一下 <code>Xcode Builder</code>：</p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-QQ20180727-093711@2x.png" alt="QQ20180727-093711@2x"></p><p>在 <code>Apple Development Teams</code> 中配置你的开发者账号信息。你可以登录 <a href="https://developer.apple.com/account" target="_blank" rel="noopener">Apple 开发者中心</a>，然后选择 <code>Membership</code>，获取 <code>Team Name</code> 和 <code>Development Team ID</code>。</p><p>在 <code>Keychains</code> 中配置你的钥匙串，通常这里配置成“登录”钥匙串：</p><ul><li><code>Keychain path</code> 通常是 <code>$(HOME)/Library/Keychains/login.keychains</code></li><li><code>Keychain password</code> 通常是你的登录密码</li><li><code>Keychain Name</code> 你可已自定义</li></ul><p><strong>注意：这里配置的开发者账号的 development.cer 和 distribution.cer 要安装到安装 Jenkins 这台机器的 keychains 中，病区这个 keychinas 就是刚刚配置的”登录“钥匙串，这个要对应起来，否则在构建的时候会因为在钥匙串中找不到证书导致构建失败</strong></p><h3 id="安装-Upload-to-pgyer-插件"><a href="#安装-Upload-to-pgyer-插件" class="headerlink" title="安装 Upload to pgyer 插件"></a>安装 <code>Upload to pgyer</code> 插件</h3><p>在”系统管理“-&gt;”插件管理“-&gt;”可选插件“中搜索 <code>Upload to pgyer</code> 安装；</p><h3 id="创建-iOS-构建项目"><a href="#创建-iOS-构建项目" class="headerlink" title="创建 iOS 构建项目"></a>创建 iOS 构建项目</h3><p>点击”新建任务“，输入一个任务名称，选择”构建一个自由风格的软件项目”：<br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326566521137.jpg" alt><br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326566641292.jpg" alt></p><p>点击 <code>OK</code>，进入项目的配置界面：<br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326608381287.jpg" alt></p><p>所有的构建项目基本上都是由这几项构成的：</p><ul><li>General（通用信息）</li><li>源码管理</li><li>构建触发器</li><li>构建环境</li><li>构建</li><li>构建后操作</li></ul><p>在 <code>General</code> 中可以配置项目的基本信息，通常会配置”丢弃旧的构建“，如下图：<br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326613438610.jpg" alt></p><p>在”源码管理“中可以配置源码地址，通常使用 Git 来管理。</p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326615267864.jpg" alt></p><ul><li><code>Repository URL</code>：源码仓库地址</li><li><code>Credentials</code>：登录仓库的用户名和密码或者 SSH private key</li><li><code>Branches to build</code>：用来构建的分支</li></ul><p>在”构建触发器“中可以配置如何触发这个构建过程。<br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326617635924.jpg" alt></p><p>通常选择”轮询 SCM“，如上图，代表每5分钟去检查一次仓库是否有更新，如果有更新，触发构建过程。</p><p>在”构建环境“中可以配置构建工程的环境。<br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326620001847.jpg" alt></p><p>在”构建“中配置具体的构建过程。<br>点击”添加构建步骤“-&gt;”Xcode“，添加 <code>Xcode</code> 构建过程。<br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326621055206.jpg" alt><br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326621669132.jpg" alt></p><p>在 <code>General build settings</code> 中配置具体的构建参数：</p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326624614150.jpg" alt><br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326626076461.jpg" alt></p><ul><li><code>Development Team</code>：选择配置好的 Apple 开发者账号，如果留空，代表使用 iOS 工程中的配置</li><li><code>Configuration</code>：Release 或者 Debug</li><li><code>Scode Schema File</code>：用来打包 IPA 的 Schema</li></ul><p>在 <code>Code signing &amp; OS X keychain options</code> 中配签名方式：</p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326626704555.jpg" alt></p><p>我这里配置的是自动签名，选择对应的 <code>keychain</code>，这个 <code>keychain</code> 是在之前”系统管理“中添加的；</p><p><code>Advanced Xcode build options</code> 和 <code>Versioning</code> 没有特殊需求，可以不管；</p><p>在”构建后操作“中配置上传 IPA 到蒲公英的过程。</p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326632311292.jpg" alt></p><p>点击”增加构建后操作步骤“-&gt;”Upload to pgyer with apiV2“：</p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326632178098.jpg" alt><br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326633020725.jpg" alt></p><p>输入 <code>pyger api_key</code> 和 <code>file wildcard</code>。</p><p><strong>注意：<code>file wildcard</code>（文件通配符）一定要能够匹配到构建出来的 IPA ，否则上传会失败。</strong></p><p>最有一定要点击”保存“，完成项目的配置。</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>在主面板上可以看到我们刚刚创建的项目：</p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326636650942.jpg" alt></p><p>点击最右侧的”构建按钮“，开始构建，这样可以立即检验我们之前的配置是否可用；</p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326637535445.jpg" alt><br><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326638019874.jpg" alt></p><p>如果构建失败了，可以去查看Console Output可以查看log日志。</p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326691235578.png" alt></p><h2 id="配置-Jenkins-作为后台进程"><a href="#配置-Jenkins-作为后台进程" class="headerlink" title="配置 Jenkins 作为后台进程"></a>配置 Jenkins 作为后台进程</h2><p>执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew services start jenkins</span><br></pre></td></tr></table></figure><p>这样 Jenkins 就作为后台进程运行了，但是这样会有个问题，就是局域网内其他机器无法通过 ip 地址来访问，这时因为 jenkins 进程默认监听 ListenAddress 是 127.0.0.1。知道了原因，那么就可以通过修改 ListenAddress 来修复这个问题；</p><p>打开 Jenkins 安装的文件夹 <code>/usr/local/Cellar/jenkins/</code>，打开对应版本下面的 <code>homebrew.mxcl.jenkins.plist</code> 文件，修改 <code>--httpListenAddress=0.0.0.0</code>，如下图：</p><p><img src="http://oe0m44pef.bkt.clouddn.com/2018-07-27-15326698393440.jpg" alt></p><p>然后执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew services restart jenkins</span><br></pre></td></tr></table></figure><p>这样，局域网内的其他机器就可以通过 ip 地址来访问 Jenkins 服务了。</p><p>以上就是我关于Jenkins持续集成的一次实践经验。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;使用-Jenkins-构建-iOS-应用并上传蒲公英&quot;&gt;&lt;a href=&quot;#使用-Jenkins-构建-iOS-应用并上传蒲公英&quot; class=&quot;headerlink&quot; title=&quot;使用 Jenkins 构建 iOS 应用并上传蒲公英&quot;&gt;&lt;/a&gt;使用
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>.gitignore 语法规则</title>
    <link rel="alternate" type="text/html" href="http://lg8294.cn/myblog/2018/07/27/gitignore-%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/"/>
    <id>http://lg8294.cn/myblog/2018/07/27/gitignore-%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/</id>
    
    <author>
      <name>李刚</name>
      
      <email>lg8294@qq.com</email>
      
      
      <uri>http://lg8294.cn/myblog</uri>
      
    </author>
    
    <published>2018-07-27T06:35:39.000Z</published>
    <updated>2019-09-10T14:46:58.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gitignore-语法规则"><a href="#gitignore-语法规则" class="headerlink" title=".gitignore 语法规则"></a>.gitignore 语法规则</h1><blockquote><p>.gitignore 配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为我们的版本管理带来很大的便利，以下是个人对于配置 .gitignore 的一些心得。</p></blockquote><h3 id="配置语法："><a href="#配置语法：" class="headerlink" title="配置语法："></a>配置语法：</h3><p>文件 .gitignore 的格式规范如下：</p><ul><li>所有空行或者以 ＃ 开头的行都会被 Git 忽略</li><li>可以使用标准的 glob 模式匹配</li><li>匹配模式可以以（/）开头防止递归</li><li>匹配模式可以以（/）结尾指定目录</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反</li></ul><blockquote><p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。<br>星号（*）匹配零个或多个任意字符；<br>[abc]匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；<br>问号（?）只匹配一个任意字符；<br>如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。<br>使用两个星号（*) 表示匹配任意中间目录，比如a/**/z 可以匹配 a/z, a/b/z 或 a/b/c/z等。</p></blockquote><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># no .a files</span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"># but do track lib.a, even though you&apos;re ignoring .a files above</span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"># only ignore the TODO file in the current directory, not subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"># ignore all files in the build/ directory</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"># ignore doc/notes.txt, but not doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"></span><br><span class="line"># ignore all .pdf files in the doc/ directory</span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><p>GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表，你可以在<a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a> 找到它.</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;gitignore-语法规则&quot;&gt;&lt;a href=&quot;#gitignore-语法规则&quot; class=&quot;headerlink&quot; title=&quot;.gitignore 语法规则&quot;&gt;&lt;/a&gt;.gitignore
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS开发中关于库的版本号的研究</title>
    <link rel="alternate" type="text/html" href="http://lg8294.cn/myblog/2017/09/06/iOS%E5%BC%80%E5%8F%91%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%BA%93%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7%E7%9A%84%E7%A0%94%E7%A9%B6/"/>
    <id>http://lg8294.cn/myblog/2017/09/06/iOS%E5%BC%80%E5%8F%91%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%BA%93%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7%E7%9A%84%E7%A0%94%E7%A9%B6/</id>
    
    <author>
      <name>李刚</name>
      
      <email>lg8294@qq.com</email>
      
      
      <uri>http://lg8294.cn/myblog</uri>
      
    </author>
    
    <published>2017-09-06T07:39:24.000Z</published>
    <updated>2019-09-10T14:46:58.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS开发中关于库的版本号的研究"><a href="#iOS开发中关于库的版本号的研究" class="headerlink" title="iOS开发中关于库的版本号的研究"></a>iOS开发中关于库的版本号的研究</h1><p>在Xcode中创建了库工程之后，在库头文件中会有以下默认俩个字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//! Project version number for lib.</span><br><span class="line">FOUNDATION_EXPORT double libVersionNumber;</span><br><span class="line"></span><br><span class="line">//! Project version string for lib.</span><br><span class="line">FOUNDATION_EXPORT const unsigned char libVersionString[];</span><br></pre></td></tr></table></figure><p>那么，这俩个字段具体怎么使用呢？<br>从注释中可以看出，这俩个字段是代表项目的版本号。注意这里说的是项目是你建立的 Xcode 项目，而不是 Xcode 项目中的 Target。我们都知道每个Target都可以很方便的在 General 中修改 Version 和 Build，但是对以上俩个字段是没有影响的。因此你要指定以上俩个字段的值的正确方式是修改 Project-&gt;Build Settings-&gt;Current Project Version 这个键对应的值。</p><h1 id="自定义版本号"><a href="#自定义版本号" class="headerlink" title="自定义版本号"></a>自定义版本号</h1><h2 id="添加自定义字段表示库的版本号"><a href="#添加自定义字段表示库的版本号" class="headerlink" title="添加自定义字段表示库的版本号"></a>添加自定义字段表示库的版本号</h2><p>如果你觉得通过过上面的方法修改不方便，那么我们可以添加一个自定义的字段来表示库的版本，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FOUNDATION_EXPORT double mylibVersionNumber;</span><br><span class="line"></span><br><span class="line">FOUNDATION_EXPORT NSString *const mylglibVersionString;</span><br></pre></td></tr></table></figure><p>然后在库的实现文件中指定版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">double mylglibVersionNumber = 1.1;</span><br><span class="line"></span><br><span class="line">NSString *const mylglibVersionString = @&quot;1.1.1&quot;;</span><br></pre></td></tr></table></figure><p>这个方法中建议使用字符串类型，数值类型由于小数点只能有一个，所以格式就会有限制。</p><h2 id="通过自定义方法获取版本号"><a href="#通过自定义方法获取版本号" class="headerlink" title="通过自定义方法获取版本号"></a>通过自定义方法获取版本号</h2><p>在我们开发库的过程中总是会有一个主功能类，那么我们就可以给这个类添加一个方法返回一个字符串形式的版本号，这个版本号表示这个功能的发布版本。通常由于一个库就是对一个功能的实现的打包，那么我们就可以用这个版本号作为这个库的版本号了。<br>例如我的一个库主要实现 <code>Log</code> 功能，那么我的就可以这样来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// Log.h</span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface LGLog : NSObject</span><br><span class="line"></span><br><span class="line">- (NSString *)log;</span><br><span class="line"></span><br><span class="line">+ (NSString *)version;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">// Log.m</span><br><span class="line">#import &quot;LGLog.h&quot;</span><br><span class="line"></span><br><span class="line">NSString *const kLogVersionString = @&quot;1.1.1&quot;;</span><br><span class="line"></span><br><span class="line">@implementation Log</span><br><span class="line"></span><br><span class="line">- (NSString *)log &#123;</span><br><span class="line">    NSLog(@&quot;log test&quot;);</span><br><span class="line">    return @&quot;log test&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (NSString *)version &#123;</span><br><span class="line">    return kLogVersionString;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>这样我们就可以在使用的时候知道当前使用的库的版本号了。</p><h2 id="使用-Target-的版本号来作为库的版本号"><a href="#使用-Target-的版本号来作为库的版本号" class="headerlink" title="使用 Target 的版本号来作为库的版本号"></a>使用 Target 的版本号来作为库的版本号</h2><p>如果想要使用 Target 的版本号来作为库的版本号，那么只有采用自定义方法，然后在自定义方法中读取Info.plist信息。<strong><em>这个方法只对动态库有效</em></strong>。由于静态库在工程中导入后，最终打包出来后静态库和工程代码是合并到一个包里面的，因此读取到的 Info.plist 其实是 IPA 包的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// Log.h</span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface LGLog : NSObject</span><br><span class="line"></span><br><span class="line">- (NSString *)log;</span><br><span class="line"></span><br><span class="line">+ (NSString *)version;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">// Log.m</span><br><span class="line">#import &quot;LGLog.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation Log</span><br><span class="line"></span><br><span class="line">- (NSString *)log &#123;</span><br><span class="line">    NSLog(@&quot;log test&quot;);</span><br><span class="line">    return @&quot;log test&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (NSString *)version &#123;</span><br><span class="line">    NSDictionary *infoDic = [[NSBundle bundleForClass:self] infoDictionary];</span><br><span class="line">    NSString *version = [infoDic valueForKey:(__bridge NSString*)kCFBundleVersionKey];</span><br><span class="line">    return version;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;iOS开发中关于库的版本号的研究&quot;&gt;&lt;a href=&quot;#iOS开发中关于库的版本号的研究&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://lg8294.cn/myblog/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>常见证书格式及相互转换</title>
    <link rel="alternate" type="text/html" href="http://lg8294.cn/myblog/2017/08/16/%E5%B8%B8%E8%A7%81%E8%AF%81%E4%B9%A6%E6%A0%BC%E5%BC%8F%E5%8F%8A%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
    <id>http://lg8294.cn/myblog/2017/08/16/%E5%B8%B8%E8%A7%81%E8%AF%81%E4%B9%A6%E6%A0%BC%E5%BC%8F%E5%8F%8A%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</id>
    
    <author>
      <name>李刚</name>
      
      <email>lg8294@qq.com</email>
      
      
      <uri>http://lg8294.cn/myblog</uri>
      
    </author>
    
    <published>2017-08-16T09:50:27.000Z</published>
    <updated>2019-09-10T14:46:58.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见证书格式及相互转换"><a href="#常见证书格式及相互转换" class="headerlink" title="常见证书格式及相互转换"></a>常见证书格式及相互转换</h1><p>PKCS 全称是 Public-Key Cryptography Standards ，是由 RSA 实验室与其它安全系统开发商为促进公钥密码的发展而制订的一系列标准，PKCS 目前共发布过 15 个标准。 </p><p>常用的有：<br>PKCS#7 Cryptographic Message Syntax Standard<br>PKCS#10 Certification Request Standard<br>PKCS#12 Personal Information Exchange Syntax Standard</p><p>X.509是常见通用的证书格式。所有的证书都符合为Public Key Infrastructure (PKI) 制定的 ITU-T X509 国际标准。</p><p>PKCS#7 常用的后缀是： .P7B .P7C .SPC<br>PKCS#12 常用的后缀有： .P12 .PFX<br>X.509 DER 编码(ASCII)的后缀是： .DER .CER .CRT<br>X.509 PAM 编码(Base64)的后缀是： .PEM .CER .CRT<br>.cer/.crt是用于存放证书，它是2进制形式存放的，不含私钥。<br>.pem跟crt/cer的区别是它以Ascii来表示。<br>pfx/p12用于存放个人证书/私钥，他通常包含保护密码，2进制方式<br>p10是证书请求<br>p7r是CA对证书请求的回复，只用于导入<br>p7b以树状展示证书链(certificate chain)，同时也支持单个证书，不含私钥。</p><p>der,cer文件一般是二进制格式的，只放证书，不含私钥<br>crt文件可能是二进制的，也可能是文本格式的，应该以文本格式居多，功能同der/cer<br>pem文件一般是文本格式的，可以放证书或者私钥，或者两者都有<br>pem如果只含私钥的话，一般用.key扩展名，而且可以有密码保护<br>pfx,p12文件是二进制格式，同时含私钥和证书，通常有保护密码</p><ol><li><p>怎么判断是文本格式还是二进制？</p><p> 用记事本打开，如果是规则的数字字母，如</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">—–BEGIN CERTIFICATE—–</span><br><span class="line">MIIE9jCCA96gAwIBAgIQVXD9d9wgivhJM//a3VIcDjANBgkqhkiG9w0BAQUFADBy</span><br><span class="line">—–END CERTIFICATE—–</span><br></pre></td></tr></table></figure><p> 就是文本的。</p><p> 上面的<code>—–BEGIN CERTIFICATE—–</code>，说明这是一个证书；<br> 如果是<code>—–BEGIN RSA PRIVATE KEY—–</code>，说明这是一个私钥，文本格式的私钥，也可能有密码保护；</p></li><li><p>文本格式怎么变成二进制？</p><p> 从程序角度来说，去掉前后的—-行，剩下的去掉回车，用base64解码，就得到二进制了,不过一般都用命令行openssl完成这个工作；</p></li></ol><h2 id="一-用openssl创建CA证书的RSA密钥-PEM格式-："><a href="#一-用openssl创建CA证书的RSA密钥-PEM格式-：" class="headerlink" title="一 用openssl创建CA证书的RSA密钥(PEM格式)："></a>一 用openssl创建CA证书的RSA密钥(PEM格式)：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -des3 -out ca.key 1024</span><br></pre></td></tr></table></figure><h2 id="二-用openssl创建CA证书-PEM格式-假如有效期为一年-："><a href="#二-用openssl创建CA证书-PEM格式-假如有效期为一年-：" class="headerlink" title="二 用openssl创建CA证书(PEM格式,假如有效期为一年)："></a>二 用openssl创建CA证书(PEM格式,假如有效期为一年)：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -days 365 -key ca.key -out ca.crt -config openssl.cnf</span><br><span class="line">//openssl是可以生成DER格式的CA证书的，最好用IE将PEM格式的CA证书转换成DER格式的CA证书。</span><br></pre></td></tr></table></figure><h2 id="三-x509到pfx"><a href="#三-x509到pfx" class="headerlink" title="三 x509到pfx"></a>三 x509到pfx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkcs12 -export –in keys/client1.crt -inkey keys/client1.key -out keys/client1.pfx</span><br></pre></td></tr></table></figure><h2 id="四-PEM格式的ca-key转换为Microsoft可以识别的pvk格式。"><a href="#四-PEM格式的ca-key转换为Microsoft可以识别的pvk格式。" class="headerlink" title="四 PEM格式的ca.key转换为Microsoft可以识别的pvk格式。"></a>四 PEM格式的ca.key转换为Microsoft可以识别的pvk格式。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pvk -in ca.key -out ca.pvk -nocrypt -topvk</span><br></pre></td></tr></table></figure><h2 id="五-PKCS-12-到-PEM-的转换"><a href="#五-PKCS-12-到-PEM-的转换" class="headerlink" title="五 PKCS#12 到 PEM 的转换"></a>五 PKCS#12 到 PEM 的转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -nocerts -nodes -in cert.p12 -out private.pem</span><br><span class="line">//验证 openssl pkcs12 -clcerts -nokeys -in cert.p12 -out cert.pem</span><br></pre></td></tr></table></figure><h2 id="六-从-PFX-格式文件中提取私钥格式文件-key"><a href="#六-从-PFX-格式文件中提取私钥格式文件-key" class="headerlink" title="六 从 PFX 格式文件中提取私钥格式文件 (.key)"></a>六 从 PFX 格式文件中提取私钥格式文件 (.key)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -in mycert.pfx -nocerts -nodes -out mycert.key</span><br></pre></td></tr></table></figure><h2 id="七-转换-pem-到到-spc"><a href="#七-转换-pem-到到-spc" class="headerlink" title="七 转换 pem 到到 spc"></a>七 转换 pem 到到 spc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl crl2pkcs7 -nocrl -certfile venus.pem -outform DER -out venus.spc</span><br><span class="line">//用 -outform -inform 指定 DER 还是 PAM 格式。例如：</span><br><span class="line">openssl x509 -in Cert.pem -inform PEM -out cert.der -outform DER</span><br></pre></td></tr></table></figure><h2 id="八-PEM-到-PKCS-12-的转换"><a href="#八-PEM-到-PKCS-12-的转换" class="headerlink" title="八 PEM 到 PKCS#12 的转换"></a>八 PEM 到 PKCS#12 的转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -in Cert.pem -out Cert.p12 -inkey key.pem</span><br></pre></td></tr></table></figure><h2 id="九-从用户证书-server-crt提取出公钥文件"><a href="#九-从用户证书-server-crt提取出公钥文件" class="headerlink" title="九 从用户证书 server.crt提取出公钥文件"></a>九 从用户证书 server.crt提取出公钥文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -outform PEM -in server/server.crt -pubkey -out server/server.pubkey</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDYhJizzt4+zhLMTSjDk0rd6MlK</span><br><span class="line">xBYKIp972+Wc9KSpOs5LGQ+2802mlr6dSDWJJhJShArqOIKgxNE7ZBZYlGeDo4l6</span><br><span class="line">Dm4DyVFpu62fObgk6vmU8T7nvF8Uo7sQdpfqgUjofGFgUDjB3fYgKUTp+kOj6RMh</span><br><span class="line">R3uttrZmOraF/rEUkQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>可以显示公钥信息，手动将其中内容复制到一个文件中做公钥测试成功，但是此命令输出的文件内容不是公钥信息，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIICpTCCAg6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBFMQswCQYDVQQGEwJjbjEQ</span><br><span class="line">MA4GA1UECBMHYmVpamluZzEMMAoGA1UEChMDYW9lMRYwFAYDVQQDEw13d3cuenlu</span><br><span class="line">ZXQubXRuMB4XDTEzMDYwMjAxMjIxNloXDTE0MDYwMjAxMjIxNlowbzELMAkGA1UE</span><br><span class="line">BhMCY24xEDAOBgNVBAgMB2JlaWppbmcxDDAKBgNVBAoMA0FPRTEPMA0GA1UEAwwG</span><br><span class="line">d2l6YXJkMQwwCgYDVQQLDANjb3AxITAfBgkqhkiG9w0BCQEWEnd6aGgxOTg4QGdt</span><br><span class="line">YWlsLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA2ISYs87ePs4SzE0o</span><br><span class="line">w5NK3ejJSsQWCiKfe9vlnPSkqTrOSxkPtvNNppa+nUg1iSYSUoQK6jiCoMTRO2QW</span><br><span class="line">WJRng6OJeg5uA8lRabutnzm4JOr5lPE+57xfFKO7EHaX6oFI6HxhYFA4wd32IClE</span><br><span class="line">6fpDo+kTIUd7rba2Zjq2hf6xFJECAwEAAaN7MHkwCQYDVR0TBAIwADAsBglghkgB</span><br><span class="line">hvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYE</span><br><span class="line">FOhSP6PH+gt+PZjgIjhLGMMakFfMMB8GA1UdIwQYMBaAFMy18STW93imC2lMDsqI</span><br><span class="line">i6P0N+1hMA0GCSqGSIb3DQEBBQUAA4GBAH5nNEEP9HeBI7osag8SKRwu4VICQl5W</span><br><span class="line">AkHv08/kbVxd8B6ieI9si+DpHMQMl5Uk44Vz164aEAlkJFL3UEt8XJPpnYmrEM5X</span><br><span class="line">jdF4+VmQqPcxsSlxRmk60VMpR+cTZURPweKtbTD8WkszaShG263k+4GWuiERxVJu</span><br><span class="line">uL1TUTvMbg6B</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure></p><p>直接输入  <code>openssl x509 -in ca.crt -pubkey</code><br>会看到两个公钥输出，如果将它转换成der格式文件的公钥文件，则没有任何多余输出<br><code>openssl x509 -in ca.crt -inform PEM -out ca.der -outform DER</code></p><h2 id="十-openssl从PFX导出私钥、公钥"><a href="#十-openssl从PFX导出私钥、公钥" class="headerlink" title="十 openssl从PFX导出私钥、公钥"></a>十 openssl从PFX导出私钥、公钥</h2><p>从pfx提取密钥信息，并转换为key格式（pfx使用pkcs12模式补足）</p><ol><li><p>提取密钥对（如果pfx证书已加密，会提示输入密码。）</p><p> <code>openssl pkcs12 -in 1.pfx -nocerts -nodes -out 1.key</code></p></li><li><p>从密钥对提取私钥</p><p> <code>openssl rsa -in  1.key -out 1_pri.key</code></p></li><li><p>从密钥对提取公钥</p><p> <code>openssl rsa -in 1.key -pubout -out 1_pub.key</code></p></li><li><p>因为RSA算法使用的是pkcs8模式补足，需要对提取的私钥进一步处理</p><p> <code>openssl pkcs8 -in 1_pri.key -out 1_pri.p8 -outform der -nocrypt -topk8</code></p></li></ol><h1 id="密钥库文件格式-Keystore"><a href="#密钥库文件格式-Keystore" class="headerlink" title="密钥库文件格式[Keystore]"></a>密钥库文件格式[Keystore]</h1><table><thead><tr><th>格式</th><th>扩展名</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>JKS</td><td>.jks/.ks</td><td>[Java Keystore] 密钥库的Java实现版本，provider为SUN</td><td>密钥库和私钥用不同的密码进行保护</td></tr><tr><td>JCEKS</td><td>.jce</td><td>[JCE Keystore] 密钥库的JCE实现版本，provider为SUN JCE</td><td>相对于JKS安全级别更高，保护Keystore私钥时采用TripleDES</td></tr><tr><td>PKCS12</td><td>.p12/.pfx</td><td>[PKCS #12] 个人信息交换语法标准</td><td>1、包含私钥、公钥及其证书<br> 2、密钥库和私钥用相同密码进行保护</td></tr><tr><td>BKS</td><td>.bks</td><td>Bouncycastle Keystore] 密钥库的BC实现版本，provider为BC</td><td>基于JCE实现</td></tr><tr><td>UBER</td><td>.ubr</td><td>[Bouncycastle UBER Keystore] 密钥库的BC更安全实现版本，provider为BC</td></tr></tbody></table><h1 id="证书文件格式-Certificate"><a href="#证书文件格式-Certificate" class="headerlink" title="证书文件格式[Certificate]"></a>证书文件格式[Certificate]</h1><table><thead><tr><th>格式</th><th>扩展名</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>DER</td><td>.cer/.crt/.rsa</td><td>[ASN .1 DER] 用于存放证书</td><td>不含私钥、二进制</td></tr><tr><td>PKCS7</td><td>.p7b/.p7r</td><td>[PKCS #7] 加密信息语法标准</td><td>1、p7b以树状展示证书链，不含私钥<br> 2、p7r为CA对证书请求签名的回复，只能用于导入</td></tr><tr><td>CMS</td><td>.p7c/.p7m/.p7s</td><td>[Cryptographic Message Syntax]</td><td>1、p7c只保存证书<br> 2、p7m：signature with enveloped data<br> 3、p7s：时间戳签名文件</td></tr><tr><td>PEM</td><td>.pem</td><td>[Printable Encoded Message]</td><td>1、该编码格式在RFC1421中定义，其实PEM是[Privacy-Enhanced Mail]的简写，但他也同样广泛运用于密钥管理<br> 2、ASCII文件<br> 3、一般基于base 64编码</td></tr><tr><td>PKCS10</td><td>.p10/.csr</td><td>[PKCS #10] 公钥加密标准[Certificate Signing Request]</td><td>1、证书签名请求文件<br> 2、ASCII文件<br> 3、CA签名后以p7r文件回复<br></td></tr><tr><td>SPC</td><td>.pvk/.spc</td><td>[Software Publishing Certificate]</td><td>微软公司特有的双证书文件格式，经常用于代码签名，其中 pvk 用于保存私钥, spc 用于保存公钥 </td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;常见证书格式及相互转换&quot;&gt;&lt;a href=&quot;#常见证书格式及相互转换&quot; class=&quot;headerlink&quot; title=&quot;常见证书格式及相互转换&quot;&gt;&lt;/a&gt;常见证书格式及相互转换&lt;/h1&gt;&lt;p&gt;PKCS 全称是 Public-Key Cryptography
        
      
    
    </summary>
    
    
      <category term="证书" scheme="http://lg8294.cn/myblog/tags/%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>myfirstpost</title>
    <link rel="alternate" type="text/html" href="http://lg8294.cn/myblog/2017/08/09/myfirstpost/"/>
    <id>http://lg8294.cn/myblog/2017/08/09/myfirstpost/</id>
    
    <author>
      <name>李刚</name>
      
      <email>lg8294@qq.com</email>
      
      
      <uri>http://lg8294.cn/myblog</uri>
      
    </author>
    
    <published>2017-08-09T06:50:15.000Z</published>
    <updated>2019-09-10T14:46:58.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这是我的第一个文档"><a href="#这是我的第一个文档" class="headerlink" title="这是我的第一个文档"></a>这是我的第一个文档</h1><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;这是我的第一个文档&quot;&gt;&lt;a href=&quot;#这是我的第一个文档&quot; class=&quot;headerlink&quot; title=&quot;这是我的第一个文档&quot;&gt;&lt;/a&gt;这是我的第一个文档&lt;/h1&gt;&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot;
        
      
    
    </summary>
    
    
  </entry>
  
</feed>
